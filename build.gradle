buildscript {
    repositories { jcenter() }
    dependencies { classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion" }
}

plugins {
    id "com.moowork.node" version "0.11"
}

apply plugin: "idea"
apply plugin: "java"
apply plugin: "eclipse-wtp"
apply plugin: "spring-boot"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = sourceCompatibility

repositories { jcenter() }

dependencies {
    compile "org.springframework.boot:spring-boot-starter-security",
            "org.springframework.boot:spring-boot-starter-web",
            "org.springframework.boot:spring-boot-starter-websocket",
            "org.springframework.boot:spring-boot-starter-actuator",
            "org.springframework.boot:spring-boot-starter-redis",
    
            "org.springframework.security:spring-security-messaging",
            "org.springframework.session:spring-session:$springSessionVersion",
            "org.apache.commons:commons-pool2:$commonsPoolVersion",
            "com.github.kstyrc:embedded-redis:$redisVersion",
            "io.projectreactor:reactor-core:${reactorVersion}",
            "io.netty:netty-all:$nettyVersion"

	compile("io.projectreactor:reactor-net:$reactorVersion") {
		exclude group: "io.netty", module: "netty-all"
	}
    
    testCompile "org.springframework.boot:spring-boot-starter-test"
}

node {
    download = true
    version = nodeVersion
    npmVersion = npmVersion
}

task npm(type: NpmTask, dependsOn: npmInstall) { args = ["run","bower","install"] }

build.dependsOn npm
build.shouldRunAfter npm

task wrapper(type: Wrapper) { gradleVersion = gradleVersion }

eclipse {
    classpath {
         containers.remove("org.eclipse.jdt.launching.JRE_CONTAINER")
         containers "org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"
    }
}